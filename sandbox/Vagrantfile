# Generated by Cyber Sandbox Creator
# https://gitlab.ics.muni.cz/muni-kypo-csc/cyber-sandbox-creator
#
# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  # device (router): router
  config.vm.define "router" do |device|
    device.vm.hostname = "router"
    device.vm.box = "munikypo/debian-10"
    device.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: ".git/"
    device.vm.provider "virtualbox" do |provider|
      provider.memory = 256
      provider.cpus = 1
    end
    # basic configuration of devices and networks
    device.vm.provision :ansible_local do |provisioner|
      provisioner.playbook = "base_provisioning/device_configuration.yml"
      provisioner.limit = "router"
      provisioner.groups = {
        "hosts" => ['server', 'defender', 'attacker'],
        "routers" => ['router'],
        "windows" => []
      }
      provisioner.extra_vars = {
        ansible_python_interpreter: "python3"
      }
    end

    # user configuration of devices
    device.vm.provision :ansible_local do |provisioner|
      provisioner.playbook = "provisioning/playbook.yml"
      provisioner.limit = "router"
      provisioner.groups = {
        "hosts" => ['server', 'defender', 'attacker'],
        "routers" => ['router'],
        "windows" => []
      }
      provisioner.extra_vars = {
        ansible_python_interpreter: "python3"
      }
    end

    device.vm.network :private_network, ip: "10.10.20.1", netmask: "255.255.255.0", virtualbox__intnet: "server-switch"
    device.vm.network :private_network, ip: "10.10.30.1", netmask: "255.255.255.0", virtualbox__intnet: "defender-switch"
    device.vm.network :private_network, ip: "10.10.40.1", netmask: "255.255.255.0", virtualbox__intnet: "attacker-switch"
  end

  # device (host): server
  config.vm.define "server" do |device|
    device.vm.hostname = "server"
    device.vm.box = "FIIT_DP/vuln_server"
    device.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: ".git/"
    device.vm.provider "virtualbox" do |provider|
      provider.memory = 4096
      provider.cpus = 1
    end
    # basic configuration of devices and networks
    device.vm.provision :ansible_local do |provisioner|
      provisioner.playbook = "base_provisioning/device_configuration.yml"
      provisioner.limit = "server"
      provisioner.groups = {
        "hosts" => ['server', 'defender', 'attacker'],
        "routers" => ['router'],
        "windows" => []
      }
      provisioner.extra_vars = {
        ansible_python_interpreter: "python3"
      }
    end

    # user configuration of devices
    device.vm.provision :ansible_local do |provisioner|
      provisioner.playbook = "provisioning/playbook.yml"
      provisioner.limit = "server"
      provisioner.groups = {
        "hosts" => ['server', 'defender', 'attacker'],
        "routers" => ['router'],
        "windows" => []
      }
      provisioner.extra_vars = {
        ansible_python_interpreter: "python3"
      }
    end

    device.vm.network :private_network, ip: "10.10.20.5", netmask: "255.255.255.0", virtualbox__intnet: "server-switch"
  end

  # device (host): defender
  config.vm.define "defender" do |device|
    device.vm.hostname = "defender"
    device.vm.box = "munikypo/kali-2020.4"
    device.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: ".git/"
    device.vm.provider "virtualbox" do |provider|
      provider.memory = 2048
      provider.cpus = 1
    end
    # basic configuration of devices and networks
    device.vm.provision :ansible_local do |provisioner|
      provisioner.playbook = "base_provisioning/device_configuration.yml"
      provisioner.limit = "defender"
      provisioner.groups = {
        "hosts" => ['server', 'defender', 'attacker'],
        "routers" => ['router'],
        "windows" => []
      }
      provisioner.extra_vars = {
        ansible_python_interpreter: "python3"
      }
    end

    # user configuration of devices
    device.vm.provision :ansible_local do |provisioner|
      provisioner.playbook = "provisioning/playbook.yml"
      provisioner.limit = "defender"
      provisioner.groups = {
        "hosts" => ['server', 'defender', 'attacker'],
        "routers" => ['router'],
        "windows" => []
      }
      provisioner.extra_vars = {
        ansible_python_interpreter: "python3"
      }
    end

    device.vm.network :private_network, ip: "10.10.30.5", netmask: "255.255.255.0", virtualbox__intnet: "defender-switch"
  end

  # device (host): attacker
  config.vm.define "attacker" do |device|
    device.vm.hostname = "attacker"
    device.vm.box = "munikypo/kali-2020.4"
    device.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: ".git/"
    device.vm.provider "virtualbox" do |provider|
      provider.memory = 2048
      provider.cpus = 1
    end
    # basic configuration of devices and networks
    device.vm.provision :ansible_local do |provisioner|
      provisioner.playbook = "base_provisioning/device_configuration.yml"
      provisioner.limit = "attacker"
      provisioner.groups = {
        "hosts" => ['server', 'defender', 'attacker'],
        "routers" => ['router'],
        "windows" => []
      }
      provisioner.extra_vars = {
        ansible_python_interpreter: "python3"
      }
    end

    # user configuration of devices
    device.vm.provision :ansible_local do |provisioner|
      provisioner.playbook = "provisioning/playbook.yml"
      provisioner.limit = "attacker"
      provisioner.groups = {
        "hosts" => ['server', 'defender', 'attacker'],
        "routers" => ['router'],
        "windows" => []
      }
      provisioner.extra_vars = {
        ansible_python_interpreter: "python3"
      }
    end

    device.vm.network :private_network, ip: "10.10.40.5", netmask: "255.255.255.0", virtualbox__intnet: "attacker-switch"
  end

end